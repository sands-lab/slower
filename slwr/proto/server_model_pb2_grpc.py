# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import slwr.proto.server_model_pb2 as server__model__pb2


class ServerModelStub(object):
    """compile with the following command:
    python -m grpc_tools.protoc -I=proto/ --python_out=slwr/proto/ --pyi_out=slwr/proto/ --grpc_python_out=slwr/proto/ proto/server_model.proto
    also update `slwr.proto.server_model_pb2` in `server_model_pb2_grpc.py`

    The server model service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UnaryRequest = channel.unary_unary(
                '/server_model.ServerModel/UnaryRequest',
                request_serializer=server__model__pb2.BatchData.SerializeToString,
                response_deserializer=server__model__pb2.BatchData.FromString,
                )
        self.StreamRequest = channel.stream_stream(
                '/server_model.ServerModel/StreamRequest',
                request_serializer=server__model__pb2.BatchData.SerializeToString,
                response_deserializer=server__model__pb2.BatchData.FromString,
                )


class ServerModelServicer(object):
    """compile with the following command:
    python -m grpc_tools.protoc -I=proto/ --python_out=slwr/proto/ --pyi_out=slwr/proto/ --grpc_python_out=slwr/proto/ proto/server_model.proto
    also update `slwr.proto.server_model_pb2` in `server_model_pb2_grpc.py`

    The server model service definition.
    """

    def UnaryRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamRequest(self, request_iterator, context):
        """While documentation states that it is better to use unary RPCs, e.g.:
        * https://stackoverflow.com/questions/56766921/multiple-unary-rpc-calls-vs-long-running-bidirectional-streaming-in-grpc
        * https://grpc.io/docs/guides/performance/
        according to the tests I performed the streaming version is much faster in this use case
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerModelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UnaryRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.UnaryRequest,
                    request_deserializer=server__model__pb2.BatchData.FromString,
                    response_serializer=server__model__pb2.BatchData.SerializeToString,
            ),
            'StreamRequest': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamRequest,
                    request_deserializer=server__model__pb2.BatchData.FromString,
                    response_serializer=server__model__pb2.BatchData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'server_model.ServerModel', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServerModel(object):
    """compile with the following command:
    python -m grpc_tools.protoc -I=proto/ --python_out=slwr/proto/ --pyi_out=slwr/proto/ --grpc_python_out=slwr/proto/ proto/server_model.proto
    also update `slwr.proto.server_model_pb2` in `server_model_pb2_grpc.py`

    The server model service definition.
    """

    @staticmethod
    def UnaryRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server_model.ServerModel/UnaryRequest',
            server__model__pb2.BatchData.SerializeToString,
            server__model__pb2.BatchData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamRequest(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/server_model.ServerModel/StreamRequest',
            server__model__pb2.BatchData.SerializeToString,
            server__model__pb2.BatchData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
